#!/usr/bin/env python3
"""trixctl - CLI for Awtrix3 smart pixel clock"""

import argparse
import configparser
import json
import os
import sys
from pathlib import Path
from awtrix3 import Awtrix3


def generate_config():
    """Generate a self-documented config file template"""
    config_content = """# trixctl Configuration File
# This file contains default settings for the trixctl command.
# CLI arguments will override these settings.
#
# For security, passwords should be set via environment variable:
# export TRIXCTL_PASSWORD="your_password"

[device]
# IP address or hostname of your Awtrix3 device
# Example: host = 192.168.1.100
host = 

# Username for device authentication (if required)
# Example: username = admin
username = 

[settings]
# Default output format (json is currently the only option)
output_format = json

# Example usage:
# ./trixctl notify "Hello World"    # Uses config file host
# ./trixctl --host 192.168.1.50 notify "Hi"  # Override with CLI arg
"""
    
    config_path = Path.home() / '.trixctl.conf'
    
    try:
        with open(config_path, 'w') as f:
            f.write(config_content)
        # Set secure permissions (owner read/write only)
        os.chmod(config_path, 0o600)
        print(f"Generated config file: {config_path}")
        print("Edit the file to set your default device settings.")
        print("Use TRIXCTL_PASSWORD environment variable for password.")
    except Exception as e:
        print(f"Error generating config: {e}", file=sys.stderr)
        sys.exit(1)


def load_config():
    """Load configuration from ~/.trixctl.conf"""
    config_path = Path.home() / '.trixctl.conf'
    config = {}
    
    if config_path.exists():
        try:
            parser = configparser.ConfigParser()
            parser.read(config_path)
            
            if 'device' in parser:
                device = parser['device']
                if device.get('host'):
                    config['host'] = device.get('host')
                if device.get('username'):
                    config['username'] = device.get('username')
                    
        except Exception as e:
            print(f"Warning: Error reading config file {config_path}: {e}", file=sys.stderr)
    
    return config


def main():
    parser = argparse.ArgumentParser(
        description='Control Awtrix3 device',
        epilog='\nThanks to @blueforcer for Awtrix3 inspiration and @claude for implementation.\n',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--host', help='Device IP address (overrides config file)')
    parser.add_argument('--username', help='Auth username (overrides config file)')
    parser.add_argument('--password', help='Auth password (overrides config file and env var)')
    parser.add_argument('--generate-config', action='store_true', 
                       help='Generate a config file template at ~/.trixctl.conf')
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # notify command
    notify_parser = subparsers.add_parser('notify', help='Send notification')
    notify_parser.add_argument('text', help='Notification text')
    
    # stats command
    subparsers.add_parser('stats', help='Get device statistics')
    
    # power command
    power_parser = subparsers.add_parser('power', help='Power control')
    power_parser.add_argument('state', choices=['on', 'off'], help='Power state')
    
    # app command
    app_parser = subparsers.add_parser('app', help='Create custom app')
    app_parser.add_argument('name', help='App name')
    app_parser.add_argument('text', help='App text')
    
    # sound command
    sound_parser = subparsers.add_parser('sound', help='Play sound')
    sound_parser.add_argument('name', help='Sound name')
    
    # clock command
    clock_parser = subparsers.add_parser('clock', help='Configure minimal clock profile')
    clock_parser.add_argument('--12hr', action='store_true', help='Use 12-hour format (default: 24-hour)')
    clock_parser.add_argument('--seconds', action='store_true', help='Show seconds in time display')
    clock_parser.add_argument('--full', action='store_true', help='Keep all features (default: minimal mode)')
    
    # settings command
    settings_parser = subparsers.add_parser('settings', help='Configure device settings')
    settings_parser.add_argument('json_payload', help='JSON settings payload')
    
    args = parser.parse_args()
    
    # Handle generate-config command
    if getattr(args, 'generate_config', False):
        generate_config()
        return
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Load config file
    config = load_config()
    
    # Determine values with priority: CLI args > env vars > config file
    host = args.host or config.get('host')
    username = args.username or config.get('username')
    password = args.password or os.environ.get('TRIXCTL_PASSWORD')
    
    if not host:
        print("Error: No host specified. Use --host, set it in config file, or run --generate-config", file=sys.stderr)
        sys.exit(1)
    
    # Setup auth
    auth = None
    if username and password:
        auth = (username, password)
    
    # Create client
    client = Awtrix3(host, auth=auth)
    
    try:
        if args.command == 'notify':
            result = client.notify(args.text)
        elif args.command == 'stats':
            result = client.stats()
        elif args.command == 'power':
            result = client.power(args.state == 'on')
        elif args.command == 'app':
            result = client.custom_app(args.name, args.text)
        elif args.command == 'sound':
            result = client.play_sound(args.name)
        elif args.command == 'clock':
            result = client.clock_profile(
                format_24hr=not getattr(args, '12hr', False),
                show_seconds=args.seconds,
                minimal=not args.full
            )
        elif args.command == 'settings':
            import json
            try:
                settings_data = json.loads(args.json_payload)
                result = client.configure_settings(settings_data)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON payload - {e}", file=sys.stderr)
                sys.exit(1)
        
        if result:
            print(json.dumps(result, indent=2))
            
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()