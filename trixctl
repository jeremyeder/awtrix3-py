#!/usr/bin/env python3
"""trixctl - CLI for Awtrix3 smart pixel clock"""

import argparse
import configparser
import json
import os
import sys
from pathlib import Path
from awtrix3 import Awtrix3


def format_stats(stats):
    """Format stats output for better readability"""
    if not stats or not isinstance(stats, dict):
        return json.dumps(stats, indent=2) if stats else "No data"
    
    formatted_lines = []
    handled_keys = set()
    
    # Common fields with nice formatting
    field_formatters = {
        'battery': lambda x: f"Battery: {x}%",
        'bat': lambda x: f"Battery: {x}%",
        'uptime': lambda x: f"Uptime: {x // 3600}h {(x % 3600) // 60}m",
        'ram': lambda x: f"Memory: {x} KB",
        'memory': lambda x: f"Memory: {x} KB",
        'temp': lambda x: f"Temperature: {x}°C",
        'temperature': lambda x: f"Temperature: {x}°C",
        'wifi_signal': lambda x: f"WiFi Signal: {x} dBm",
        'rssi': lambda x: f"WiFi Signal: {x} dBm",
        'version': lambda x: f"Version: {x}",
        'firmware': lambda x: f"Firmware: {x}",
        'ip': lambda x: f"IP Address: {x}",
        'hostname': lambda x: f"Hostname: {x}",
        'ssid': lambda x: f"WiFi SSID: {x}",
    }
    
    # Process known fields first
    for key, formatter in field_formatters.items():
        if key in stats:
            try:
                formatted_lines.append(formatter(stats[key]))
                handled_keys.add(key)
            except:
                # If formatting fails, we'll handle it in the additional data section
                pass
    
    # Handle any remaining fields as "Additional Data"
    remaining_data = {k: v for k, v in stats.items() if k not in handled_keys}
    if remaining_data:
        if formatted_lines:
            formatted_lines.append("")  # Add spacing
        formatted_lines.append("Additional Data:")
        formatted_lines.append(json.dumps(remaining_data, indent=2))
    
    return "\n".join(formatted_lines) if formatted_lines else json.dumps(stats, indent=2)


def generate_config():
    """Generate a self-documented config file template"""
    config_content = """# trixctl Configuration File
# This file contains default settings for the trixctl command.
# CLI arguments will override these settings.
#
# For security, passwords should be set via environment variable:
# export TRIXCTL_PASSWORD="your_password"

[device]
# IP address or hostname of your Awtrix3 device
# Example: host = 192.168.1.100
host = 

# Username for device authentication (if required)
# Example: username = admin
username = 

[settings]
# Default output format (json is currently the only option)
output_format = json

# Example usage:
# ./trixctl notify "Hello World"    # Uses config file host
# ./trixctl --host 192.168.1.50 notify "Hi"  # Override with CLI arg
"""
    
    config_path = Path.home() / '.trixctl.conf'
    
    try:
        with open(config_path, 'w') as f:
            f.write(config_content)
        # Set secure permissions (owner read/write only)
        os.chmod(config_path, 0o600)
        print(f"Generated config file: {config_path}")
        print("Edit the file to set your default device settings.")
        print("Use TRIXCTL_PASSWORD environment variable for password.")
    except Exception as e:
        print(f"Error generating config: {e}", file=sys.stderr)
        sys.exit(1)


def load_config():
    """Load configuration from ~/.trixctl.conf"""
    config_path = Path.home() / '.trixctl.conf'
    config = {}
    
    if config_path.exists():
        try:
            parser = configparser.ConfigParser()
            parser.read(config_path)
            
            if 'device' in parser:
                device = parser['device']
                if device.get('host'):
                    config['host'] = device.get('host')
                if device.get('username'):
                    config['username'] = device.get('username')
                    
        except Exception as e:
            print(f"Warning: Error reading config file {config_path}: {e}", file=sys.stderr)
    
    return config


def main():
    parser = argparse.ArgumentParser(
        description='Control Awtrix3 device',
        epilog='\nThanks to @blueforcer for Awtrix3 inspiration and @claude for implementation.\n',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--host', help='Device IP address (overrides config file)')
    parser.add_argument('--username', help='Auth username (overrides config file)')
    parser.add_argument('--password', help='Auth password (overrides config file and env var)')
    parser.add_argument('--generate-config', action='store_true', 
                       help='Generate a config file template at ~/.trixctl.conf')
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # notify command
    notify_parser = subparsers.add_parser('notify', help='Send notification')
    notify_parser.add_argument('text', help='Notification text')
    
    # stats command
    subparsers.add_parser('stats', help='Get device statistics')
    
    # power command
    power_parser = subparsers.add_parser('power', help='Power control')
    power_parser.add_argument('state', choices=['on', 'off'], help='Power state')
    
    # app command
    app_parser = subparsers.add_parser('app', help='Create custom app')
    app_parser.add_argument('name', help='App name')
    app_parser.add_argument('text', help='App text')
    
    # sound command
    sound_parser = subparsers.add_parser('sound', help='Play sound')
    sound_parser.add_argument('name', help='Sound name')
    
    args = parser.parse_args()
    
    # Handle generate-config command
    if getattr(args, 'generate_config', False):
        generate_config()
        return
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Load config file
    config = load_config()
    
    # Determine values with priority: CLI args > env vars > config file
    host = args.host or config.get('host')
    username = args.username or config.get('username')
    password = args.password or os.environ.get('TRIXCTL_PASSWORD')
    
    if not host:
        print("Error: No host specified. Use --host, set it in config file, or run --generate-config", file=sys.stderr)
        sys.exit(1)
    
    # Setup auth
    auth = None
    if username and password:
        auth = (username, password)
    
    # Create client
    client = Awtrix3(host, auth=auth)
    
    try:
        if args.command == 'notify':
            result = client.notify(args.text)
        elif args.command == 'stats':
            result = client.stats()
            if result:
                print(format_stats(result))
                return
        elif args.command == 'power':
            result = client.power(args.state == 'on')
        elif args.command == 'app':
            result = client.custom_app(args.name, args.text)
        elif args.command == 'sound':
            result = client.play_sound(args.name)
        
        if result:
            print(json.dumps(result, indent=2))
            
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()